#set( $targetFile = "${serviceModuleBasePackagePath}/util/${classDef_name}Indexer.java" )

package ${basePackage}.util;

import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.search.BaseIndexer;
import com.liferay.portal.kernel.search.BooleanQuery;
import com.liferay.portal.kernel.search.Document;
import com.liferay.portal.kernel.search.Field;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.SearchContext;
import com.liferay.portal.kernel.search.SearchEngineUtil;
import com.liferay.portal.kernel.search.Summary;
import com.liferay.portal.kernel.security.auth.PrincipalException;
import com.liferay.portal.kernel.security.permission.ActionKeys;
import com.liferay.portal.kernel.security.permission.PermissionChecker;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.HtmlUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
#if ($hasWorkflow)
import com.liferay.portal.kernel.workflow.WorkflowConstants;
#end
import ${basePackage}.model.${classDef_name};
import ${basePackage}.service.${classDef_name}LocalServiceUtil;
import ${basePackage}.service.permission.${classDef_name}EntryPermission;
import ${basePackage}.util.${classDef_name}Util;

import java.lang.Long;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.portlet.PortletRequest; 
import javax.portlet.PortletResponse; 
import javax.portlet.PortletURL;

import org.osgi.service.component.annotations.Component;

/**
 * @author Juan Gonzalez P. 
 */
 @Component(immediate = true, service = Indexer.class)
public class ${EntityName}Indexer extends BaseIndexer<${EntityName}>{

	public static final String[] CLASS_NAMES = {${classDef_name}.class.getName()};

	public static final String PORTLET_ID = "${classDef_name}_WAR_${commonData.getProjectName()}portlet";
	
	@Override
	public String getClassName() {
		return ${classDef_name}.class.getName();
	}

	public String[] getClassNames() {
		return CLASS_NAMES;
	}

	public String getPortletId() {
		return PORTLET_ID;
	}

	public boolean hasPermission(
			PermissionChecker permissionChecker, long entryClassPK,
			String actionId)
		throws Exception {

		return ${classDef_name}EntryPermission.contains(
			permissionChecker, entryClassPK, ActionKeys.VIEW);
	}

	@Override
	public boolean isFilterSearch() {
		return _FILTER_SEARCH;
	}

	@Override
	public boolean isPermissionAware() {
		return _PERMISSION_AWARE;
	}

	@Override
	public void postProcessContextQuery(
			BooleanQuery contextQuery, SearchContext searchContext)
		throws Exception {

#if ($hasWorkflow)
		addStatus(contextQuery, searchContext);
#end
	}

	@Override
	protected void doDelete(${EntityName} entry) throws Exception {
	
		deleteDocument(entry.getCompanyId(), entry.getPrimaryKey());
	}

	@Override
	public void postProcessSearchQuery(BooleanQuery searchQuery,
            SearchContext searchContext) throws Exception {   

#set ($fields = $application.getFileDef().getFields().getFieldArray())
#foreach($field in $fields)
#set($tipoCampo = ${field.getType().getDomNode().getChildNodes().item(1).getLocalName()})
#if(${tipoCampo}=="varchar")
#if (${field.getType().getVarchar().getFilter()} == "true")
#set ($nombreCampo = ${field.getName()})
		searchQuery.addTerm("${nombreCampo}", searchContext.getKeywords());	
#end
#end
#end     

        	super.postProcessSearchQuery(searchQuery, searchContext);
    	}


	protected Document doGetDocument(${EntityName} entry) throws Exception {
	
		Document document = getBaseModelDocument(PORTLET_ID, entry);				

#if ($asset)
		//Document TITLE
		document.addText(
			Field.TITLE, HtmlUtil.extractText(entry.get${assetTitleField.substring(0,1).toUpperCase()}${assetTitleField.substring(1)}()));
	
		//Document SUMMARY
		document.addText(
			Field.CONTENT, HtmlUtil.extractText(entry.get${assetSummaryField.substring(0,1).toUpperCase()}${assetSummaryField.substring(1)}()));
#end
#set ($fields = $application.getFileDef().getFields().getFieldArray())
#set ($count=0)
#foreach($field in $fields)
#set($tipoCampo = ${field.getType().getDomNode().getChildNodes().item(1).getLocalName()})
#if(${tipoCampo}=="varchar")
#if (${field.getType().getVarchar().getFilter()} == "true")
#set ($count=$count+1)
#set ($nombreCampo = ${field.getName()})	
#if($count == 1)
#if (!$asset)
		//Document TITLE

		document.addText(
			Field.TITLE, HtmlUtil.extractText(entry.get${field.getName().substring(0,1).toUpperCase()}${field.getName().substring(1)}()));
#end

		document.addText(
			"${nombreCampo}", HtmlUtil.extractText(entry.get${field.getName().substring(0,1).toUpperCase()}${field.getName().substring(1)}()));
#else
		//${nombreCampo} field
		document.addText(
			"${nombreCampo}", HtmlUtil.extractText(entry.get${field.getName().substring(0,1).toUpperCase()}${field.getName().substring(1)}()));
#end
#end
#end
#end

		return document;
	}

	@Override
	protected Summary doGetSummary(
		Document document, Locale locale, String snippet,
		PortletRequest portletRequest, PortletResponse portletResponse) {

		String title = document.get(Field.TITLE);

		String content = snippet;

		if (Validator.isNull(snippet)) {
			content = StringUtil.shorten(document.get(Field.CONTENT), 200);
		}

		return new Summary(title, content);
	}

	@Override
	protected void doReindex(${EntityName} entry) throws Exception {
		

#if ($hasWorkflow)
#if ($hasTrash)
		if (!entry.isApproved() && !entry.isInTrash()) {
#else
		if (!entry.isApproved()) {
#end
			return;
		}
#end
		Document document = getDocument(entry);

		SearchEngineUtil.updateDocument(
			getSearchEngineId(), entry.getCompanyId(), document);
	}

	@Override
	protected void doReindex(String className, long classPK) throws Exception {
		${classDef_name} entry = ${classDef_name}LocalServiceUtil.get${classDef_name}(classPK);

		doReindex(entry);
	}

	@Override
	protected void doReindex(String[] ids) throws Exception {
		long companyId = GetterUtil.getLong(ids[0]);

		reindexEntries(companyId);
	}

	@Override
	protected String getPortletId(SearchContext searchContext) {
		return PORTLET_ID;
	}

	protected void reindexEntries(long companyId) throws Exception {
#if ($hasWorkflow)
		int count = ${classDef_name}LocalServiceUtil.getCompanyEntriesCount(
			companyId, WorkflowConstants.STATUS_APPROVED);
#else
		int count = ${classDef_name}LocalServiceUtil.getCompanyEntriesCount(
			companyId);
#end

		int pages = count / Indexer.DEFAULT_INTERVAL;

		for (int i = 0; i <= pages; i++) {
			int start = (i * Indexer.DEFAULT_INTERVAL);
			int end = start + Indexer.DEFAULT_INTERVAL;

			reindexEntries(companyId, start, end);
		}
	}

	protected void reindexEntries(long companyId, int start, int end)
		throws Exception {
#if ($hasWorkflow)
		List<${classDef_name}> entries = ${classDef_name}LocalServiceUtil.getCompanyEntries(
			companyId, WorkflowConstants.STATUS_APPROVED, start, end);
#else
		List<${classDef_name}> entries = ${classDef_name}LocalServiceUtil.getCompanyEntries(
			companyId, start, end);
#end
		if (entries.isEmpty()) {
			return;
		}

		Collection<Document> documents = new ArrayList<Document>();

		for (${classDef_name} entry : entries) {
			Document document = getDocument(entry);

			documents.add(document);
		}

		SearchEngineUtil.updateDocuments(
			getSearchEngineId(), companyId, documents);
	}	

	private static final boolean _FILTER_SEARCH = true;

	private static final boolean _PERMISSION_AWARE = true;
}
