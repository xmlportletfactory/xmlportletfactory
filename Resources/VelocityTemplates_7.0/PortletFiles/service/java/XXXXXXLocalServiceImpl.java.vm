
#set( $createPath = "${serviceModuleBasePackagePath}/service/impl" )
#set( $createName = "/${classDef_name}LocalServiceImpl.java" )
#parse("/Resources/VelocityTemplates_common/PortletFiles/macro_GetSetFieldName.vm")

package ${basePackage}.service.impl;

import java.util.List;

import ${basePackage}.exception.NoSuch${classDef_name}Exception;
import ${basePackage}.model.${classDef_name};
import ${basePackage}.service.base.${classDef_name}LocalServiceBaseImpl;
#if ($generateActivity)
import ${basePackage}.social.${classDef_name}ActivityKeys;
#end
import ${basePackage}.util.${classDef_name}Indexer;
import com.liferay.counter.kernel.service.CounterLocalServiceUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.OrderByComparator;
#if ($generateActivity || $asset)
import com.liferay.portal.kernel.util.StringPool;
#end
#if ($asset)
import com.liferay.portal.kernel.util.ContentTypes;
import com.liferay.portal.kernel.util.HtmlUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portlet.asset.model.AssetEntry;
import com.liferay.portlet.asset.model.AssetLinkConstants;
import com.liferay.portal.kernel.util.FriendlyURLNormalizerUtil;
import com.liferay.portal.model.ModelHintsUtil;
import com.liferay.portal.kernel.util.Validator;
import java.util.regex.Pattern;
#end
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.IndexerRegistryUtil;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.model.ResourceConstants;
#if ($hasWorkflow)
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.kernel.workflow.WorkflowHandlerRegistryUtil;
#end
#if ($hasTrash)
import com.liferay.portlet.trash.model.TrashEntry;
#end
#set ($fields = $application.getFileDef().getFields().getFieldArray())
#set ($hasDocuments=false)
#foreach($field in $fields)
#if(${field.getType().getDomNode().getChildNodes().item(1).getLocalName()}=="document")
#set ($hasDocuments=true)
#end
#end
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.User;

import java.util.Date;

#foreach($detailfile in $application.getDetailFiles().getDetailFileArray())
// needed for ${application.getClassDef().getName()} detail-file ${detailfile.getDetailFileClassName()}
#foreach($detailapplication in $applications)
#if (${detailapplication.getClassDef().getName()} == ${detailfile.getDetailFileClassName()})
import ${basePackage}.service.${detailapplication.getClassDef().getName()}LocalServiceUtil;
import ${basePackage}.model.${detailapplication.getClassDef().getName()};
#end
#end
#end

/**
 * @author ${author}
 * @author Juan Gonzalez P.
 */
public class ${classDef_name}LocalServiceImpl extends ${classDef_name}LocalServiceBaseImpl {

#if ($hasWorkflow)
	@SuppressWarnings("unchecked")
	public List<${classDef_name}> getCompanyEntries(
			long companyId, int status, int start, int end,
			OrderByComparator obc)
		throws SystemException {

		if (status == WorkflowConstants.STATUS_ANY) {
			return ${classInstance}Persistence.findByCompanyId(
				companyId, start, end, obc);
		}
		else {
			return ${classInstance}Persistence.findByC_S(
				companyId, status, start, end, obc);
		}
	}

	@SuppressWarnings("unchecked")
	public List<${classDef_name}> getCompanyEntries(
			long companyId, int status, int start, int end)
		throws SystemException {

		if (status == WorkflowConstants.STATUS_ANY) {
			return ${classInstance}Persistence.findByCompanyId(
				companyId, start, end);
		}
		else {
			return ${classInstance}Persistence.findByC_S(
				companyId, status, start, end);
		}
	}

	@SuppressWarnings("unchecked")
	public int getCompanyEntriesCount(
			long companyId, int status)
		throws SystemException {

		if (status == WorkflowConstants.STATUS_ANY) {
			return ${classInstance}Persistence.countByCompanyId(companyId);
		}
		else {
			return ${classInstance}Persistence.countByC_S(companyId, status);
		}
	}
#else
	@SuppressWarnings("unchecked")
	public List<${classDef_name}> getCompanyEntries(
			long companyId, int start, int end,
			OrderByComparator obc)
		throws SystemException {

		return ${classInstance}Persistence.findByCompanyId(
				companyId, start, end, obc);
	}

	@SuppressWarnings("unchecked")
	public List<${classDef_name}> getCompanyEntries(
			long companyId, int start, int end)
		throws SystemException {

		return ${classInstance}Persistence.findByCompanyId(
				companyId, start, end);
	}

	@SuppressWarnings("unchecked")
	public int getCompanyEntriesCount(
			long companyId)
		throws SystemException {

		return ${classInstance}Persistence.countByCompanyId(companyId);
	}
#end

	@SuppressWarnings("unchecked")
	public List findAllInUser(long userId)throws SystemException {
#if ($hasWorkflow)
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByU_S(userId, WorkflowConstants.STATUS_APPROVED);
#else
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByUserId(userId);
#end
		return list;
	}

	@SuppressWarnings("unchecked")
	public int countAllInUser(long userId)throws SystemException {
#if ($hasWorkflow)
		int count = ${classInstance}Persistence.countByU_S(userId, WorkflowConstants.STATUS_APPROVED);
#else
		int count = ${classInstance}Persistence.countByUserId(userId);
#end
		return count;
	}

	@SuppressWarnings("unchecked")
	public List findAllInUser(long userId, OrderByComparator orderByComparator) throws SystemException {

		List<${classDef_name}> list = (List<${classDef_name}>) findAllInUser(userId, QueryUtil.ALL_POS,QueryUtil.ALL_POS, orderByComparator);
		return list;
	}

	@SuppressWarnings("unchecked")
	public List findAllInUser(long userId, int start, int end, OrderByComparator orderByComparator) throws SystemException {
#if ($hasWorkflow)
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByU_S(userId, WorkflowConstants.STATUS_APPROVED, start, end, orderByComparator);
#else
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByUserId(userId, start, end, orderByComparator);
#end
		return list;
	}

	@SuppressWarnings("unchecked")
	public List findAllInGroup(long groupId) throws SystemException {
#if ($hasWorkflow)
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByG_S(groupId, WorkflowConstants.STATUS_APPROVED);
#else
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByGroupId(groupId);
#end
		return list;
	}

	@SuppressWarnings("unchecked")
	public int countAllInGroup(long groupId) throws SystemException {
#if ($hasWorkflow)
		int count = ${classInstance}Persistence.countByG_S(groupId, WorkflowConstants.STATUS_APPROVED);
#else
		int count = ${classInstance}Persistence.countByGroupId(groupId);
#end
		return count;
	}

	@SuppressWarnings("unchecked")
	public List findAllInGroup(long groupId, OrderByComparator orderByComparator) throws SystemException{
		List <${classDef_name}> list = (List<${classDef_name}>) findAllInGroup (groupId, QueryUtil.ALL_POS,QueryUtil.ALL_POS, orderByComparator);
		return list;
	}

	@SuppressWarnings("unchecked")
	public List findAllInGroup(long groupId, int start, int end, OrderByComparator orderByComparator) throws SystemException{
#if ($hasWorkflow)
		List <${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByG_S(groupId, WorkflowConstants.STATUS_APPROVED,start, end, orderByComparator);
#else
		List <${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByGroupId(groupId, start, end, orderByComparator);
#end
		return list;
	}

	@SuppressWarnings("unchecked")
	public List findAllInUserAndGroup(long userId, long groupId) throws SystemException {
#if ($hasWorkflow)
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByG_U_S(groupId, userId, WorkflowConstants.STATUS_APPROVED);
#else
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByUserIdGroupId(userId, groupId);
#end
		return list;
	}

	@SuppressWarnings("unchecked")
	public int countAllInUserAndGroup(long userId, long groupId) throws SystemException {
#if ($hasWorkflow)
		int count = ${classInstance}Persistence.countByG_U_S(groupId, userId, WorkflowConstants.STATUS_APPROVED);
#else
		int count = ${classInstance}Persistence.countByUserIdGroupId(userId, groupId);
#end
		return count;
	}

	@SuppressWarnings("unchecked")
	public List findAllInUserAndGroup(long userId, long groupId, OrderByComparator orderByComparator) throws SystemException {

		List<${classDef_name}> list = (List<${classDef_name}>) findAllInUserAndGroup(groupId, userId, QueryUtil.ALL_POS, QueryUtil.ALL_POS, orderByComparator);
		return list;
	}

	@SuppressWarnings("unchecked")
	public List findAllInUserAndGroup(long userId, long groupId, int start, int end, OrderByComparator orderByComparator) throws SystemException {
#if ($hasWorkflow)
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByG_U_S(groupId, userId, WorkflowConstants.STATUS_APPROVED, start, end, orderByComparator);
#else
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByUserIdGroupId(userId, groupId, start, end, orderByComparator);
#end
		return list;
	}

#if ($asset)
#if ($hasWorkflow)
	public ${classDef_name} get${classDef_name}ByUrlTitle(
			long groupId, String urlTitle, int status)
		throws PortalException, SystemException {

		${classDef_name} entry = null;

		if (status == WorkflowConstants.STATUS_ANY) {
			entry = ${classInstance}Persistence.fetchByG_UT(
				groupId, urlTitle);
		}
		else {
			List<${classDef_name}> results =${classInstance}Persistence.findByG_UT_ST(
				groupId, urlTitle, status);
			if (results!=null && results.size()>0){
				entry = results.get(0);			
			}
		}

		return entry;
	}
#else
	public ${classDef_name} get${classDef_name}ByUrlTitle(
			long groupId, String urlTitle)
		throws PortalException, SystemException {

		${classDef_name} entry = ${classInstance}Persistence.fetchByG_UT(
				groupId, urlTitle);

		return entry;
	}

#end
#end

#set ($allReadyCreated="")
#foreach($applicationIterator in $applications)
#set ($fieldArray = $applicationIterator.getFileDef().getFields().getFieldArray())
#foreach($fieldOfArray in $fieldArray)
#if (${fieldOfArray.isSetValidation()})
#if (${fieldOfArray.getValidation().isSetDepends()})
#if ($fieldOfArray.getValidation().getClassName() == $application.getClassDef().getName())
#if ($allReadyCreated!="$table.getClassDef().getName()")
#set ($allReadyCreated="$table.getClassDef().getName()")
	@SuppressWarnings("unchecked")
	public List findAllInChainValidationsBy$fieldOfArray.getValidation().getDepends().getAgainstFieldName().substring(0,1).toUpperCase()$fieldOfArray.getValidation().getDepends().getAgainstFieldName().substring(1)(long ${fieldOfArray.getValidation().getDepends().getAgainstFieldName()}) throws SystemException {
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByChainValidationsBy$fieldOfArray.getValidation().getDepends().getAgainstFieldName().substring(0,1).toUpperCase()$fieldOfArray.getValidation().getDepends().getAgainstFieldName().substring(1)(${fieldOfArray.getValidation().getDepends().getAgainstFieldName()});
		return list;
	}
#end
#end
#end
#end
#end
#end
#foreach($field in $fields)
#if($field.getValidation().getFieldName() == ${field.getName()})
	@SuppressWarnings("unchecked")
	public List findAllIn$field.getName().substring(0,1).toUpperCase()$field.getName().substring(1)(long ${field.getName()})
		throws SystemException {

		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findBy$field.getName().substring(0,1).toUpperCase()$field.getName().substring(1)(${field.getName()});
		return list;
	}
#end
#end

#foreach($tabledetail in $applications)
#foreach($detailfile in $tabledetail.getDetailFiles().getDetailFileArray())
#if ($application.getClassDef().getName() == $detailfile.getDetailFileClassName())
	@SuppressWarnings("unchecked")
	public List findAllIn${detailfile.getConnectionFieldName()}Group(long ${detailfile.getConnectionFieldName()}, long groupId)	throws SystemException {
#set ($detailFinderName = $detailfile.getConnectionFieldName().substring(0,1).toUpperCase() + $detailfile.getConnectionFieldName().substring(1))
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findBy${detailFinderName}GroupId(${detailfile.getConnectionFieldName()}, groupId);
		return list;
	}

	@SuppressWarnings("unchecked")
	public List findAllIn${detailfile.getConnectionFieldName()}(long ${detailfile.getConnectionFieldName()})	throws SystemException {
#set ($detailFinderName = $detailfile.getConnectionFieldName().substring(0,1).toUpperCase() + $detailfile.getConnectionFieldName().substring(1))
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findBy${detailFinderName}(${detailfile.getConnectionFieldName()});
		return list;
	}

	@SuppressWarnings("unchecked")
	public List findAllIn${detailfile.getConnectionFieldName()}Group(long ${detailfile.getConnectionFieldName()}, long groupId, OrderByComparator orderByComparator) throws SystemException {
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findBy${detailFinderName}GroupId(${detailfile.getConnectionFieldName()}, groupId, QueryUtil.ALL_POS,QueryUtil.ALL_POS, orderByComparator);
		return list;
	}
#end
#end
#end

	public ${classDef_name} add${classDef_name} (${classDef_name} valid${classDef_name}, ServiceContext serviceContext) throws PortalException, SystemException {
	    ${classDef_name} retVal = _add${classDef_name} (valid${classDef_name}, serviceContext);

		// Resources
		if (serviceContext.isAddGroupPermissions() ||
			serviceContext.isAddGuestPermissions()) {

			addEntryResources(
				retVal, serviceContext.isAddGroupPermissions(),
				serviceContext.isAddGuestPermissions());
		}
		else {
			addEntryResources(
				retVal, serviceContext.getGroupPermissions(),
				serviceContext.getGuestPermissions());
		}

#if ($generateActivity)
		// Social
	    
	 	socialActivityLocalService.addActivity(
				retVal.getUserId(), retVal.getGroupId(),
				${classDef_name}.class.getName(), retVal.getPrimaryKey(),
				${classDef_name}ActivityKeys.ADD_${classDef_name.toUpperCase()}, 
				StringPool.BLANK, 0);
		
#end		

#if($hasWorkflow == "false")
		// Indexer
		Indexer indexer = IndexerRegistryUtil.getIndexer(${classDef_name}.class);

		indexer.reindex(retVal);
#end
#if ($asset) 

		// Asset
		updateAsset(
			retVal.getUserId(), retVal, serviceContext.getAssetCategoryIds(),
			serviceContext.getAssetTagNames(),
			serviceContext.getAssetLinkEntryIds());

#end
#if ($hasWorkflow)
	    	WorkflowHandlerRegistryUtil.startWorkflowInstance(
			valid${classDef_name}.getCompanyId(), valid${classDef_name}.getGroupId(), valid${classDef_name}.getUserId(),
			${classDef_name}.class.getName(), retVal.getPrimaryKey(), retVal, serviceContext);

#end
		return retVal;
	}

	public ${classDef_name} update${classDef_name} (${classDef_name} valid${classDef_name}, ServiceContext serviceContext) throws PortalException, SystemException {
	
		${classDef_name} entry = ${classInstance}Persistence.findByPrimaryKey(valid${classDef_name}.getPrimaryKey());
		valid${classDef_name}.setCreateDate(entry.getCreateDate());	
     	User user = userPersistence.findByPrimaryKey(valid${classDef_name}.getUserId());
		valid${classDef_name}.setUserName(user.getFullName());	

		valid${classDef_name}.setModifiedDate(serviceContext.getModifiedDate(null));
#if ($asset)
		valid${classDef_name}.setUuid(entry.getUuid());
		valid${classDef_name}.setUrlTitle(_getUniqueURLTitle(valid${classDef_name}));
#end
#if ($generateActivity)	
		// Social
		
		socialActivityLocalService.addActivity(
			valid${classDef_name}.getUserId(), valid${classDef_name}.getGroupId(),
				${classDef_name}.class.getName(), valid${classDef_name}.getPrimaryKey(),
				${classDef_name}ActivityKeys.UPDATE_${classDef_name.toUpperCase()}, StringPool.BLANK, 0);
#end

		${classDef_name} retVal = ${classInstance}Persistence.update(valid${classDef_name});

		// Resources

		if ((serviceContext.getGroupPermissions() != null) ||
				(serviceContext.getGuestPermissions() != null)) {

			updateEntryResources(
				retVal, serviceContext.getGroupPermissions(),
				serviceContext.getGuestPermissions());
		}

		
#if($hasWorkflow == "false")
		//Indexer
		Indexer indexer = IndexerRegistryUtil.getIndexer(${classDef_name}.class);

		indexer.reindex(retVal);
#end
#if ($asset)
		// Asset

		updateAsset(
			retVal.getUserId(), retVal, serviceContext.getAssetCategoryIds(),
			serviceContext.getAssetTagNames(),
			serviceContext.getAssetLinkEntryIds());

#end
#if ($hasWorkflow)
	    	WorkflowHandlerRegistryUtil.startWorkflowInstance(
				retVal.getCompanyId(), retVal.getGroupId(), retVal.getUserId(),
				${classDef_name}.class.getName(),retVal.getPrimaryKey(), retVal, serviceContext);
#end

		return retVal;
	}

	private ${classDef_name} _add${classDef_name} (${classDef_name} valid${classDef_name}, ServiceContext serviceContext) throws PortalException, SystemException {
		${classDef_name} fileobj = ${classInstance}Persistence.create(counterLocalService.increment(${classDef_name}.class.getName()));

	     	User user = userPersistence.findByPrimaryKey(valid${classDef_name}.getUserId());

	     	Date now =new Date();
	    	fileobj.setCompanyId(valid${classDef_name}.getCompanyId());
	    	fileobj.setGroupId(valid${classDef_name}.getGroupId());
	    	fileobj.setUserId(user.getUserId());
	    	fileobj.setUserName(user.getFullName());
	    	fileobj.setCreateDate(now);
	    	fileobj.setModifiedDate(now);

#if ($asset)
	    	fileobj.setUuid(serviceContext.getUuid());
	    	fileobj.setUrlTitle(_getUniqueURLTitle(fileobj));
#if (!$assetTitleExist)
	    	fileobj.set${assetTitleField.substring(0,1).toUpperCase()}${assetTitleField.substring(1)}(valid${classDef_name}.get${assetTitleField.substring(0,1).toUpperCase()}${assetTitleField.substring(1)}());
#end
#if (!$assetSummaryExist)
	    	fileobj.set${assetSummaryField.substring(0,1).toUpperCase()}${assetSummaryField.substring(1)}(valid${classDef_name}.get${assetSummaryField.substring(0,1).toUpperCase()}${assetSummaryField.substring(1)}());
#end
#end

#set ($i =0)
#set ($hasDocuments = false)
#foreach ( $fname in $fieldNames )
#set ( $i = $i + 1)
#set ($arrayIter = ${i} - 1)
#if(${i} > 1)
#if(${fieldTypes.get(${arrayIter})}!="calculated")
#if(${fieldTypes.get(${arrayIter})}=="enum" || ${fieldTypes.get(${arrayIter})}=="boolean")
	    	fileobj.set#GetSetFieldName($i)(valid${classDef_name}.is#GetSetFieldName($i)());
#elseif(${fieldTypes.get(${arrayIter})}=="image")
	    	fileobj.set#GetSetFieldName($i)(valid${classDef_name}.get#GetSetFieldName($i)());
#set ($hasDocuments = true)
#elseif(${fieldTypes.get(${arrayIter})}=="document")
	    	fileobj.set#GetSetFieldName($i)(valid${classDef_name}.get#GetSetFieldName($i)());
#set ($hasDocuments = true)
#else
	    	fileobj.set#GetSetFieldName($i)(valid${classDef_name}.get#GetSetFieldName($i)());
#end
#end
#end
#end
#if($hasDocuments)
	     	fileobj.setFolderDLId(valid${classDef_name}.getFolderDLId());
#end

	 		return ${classInstance}Persistence.update(fileobj);
	}

	public void delete${classDef_name}Entry (${classDef_name} fileobj) throws PortalException, SystemException {

		${classInstance}Persistence.remove(fileobj.getPrimaryKey());

		// Resources

		resourceLocalService.deleteResource(
			fileobj.getCompanyId(), ${classDef_name}.class.getName(),
			ResourceConstants.SCOPE_INDIVIDUAL, fileobj.getPrimaryKey());
#if ($asset) 
		// Asset

		assetEntryLocalService.deleteEntry(
				${classDef_name}.class.getName(), fileobj.getPrimaryKey());

#end
#if(${hasDocuments})
		//Remove DocumentFile dir
		Long dlFolder = fileobj.getFolderDLId();
		if(dlFolder!=null && dlFolder!=0L) {
			dlFolderPersistence.remove(dlFolder);
		}
#end

#if ($generateActivity)
		// Social
		
		socialActivityLocalService.deleteActivities(
			${classDef_name}.class.getName(), fileobj.getPrimaryKey()); 	
#end
#if ($hasTrash) 
		// Trash

		trashEntryLocalService.deleteEntry(
			${classDef_name}.class.getName(), fileobj.getPrimaryKey());
#end
		// Indexer

		Indexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(${classDef_name}.class);

		indexer.delete(fileobj);
#if ($hasWorkflow)
		// Workflow
		workflowInstanceLinkLocalService.deleteWorkflowInstanceLinks(
			fileobj.getCompanyId(), fileobj.getGroupId(),
			${classDef_name}.class.getName(), fileobj.getPrimaryKey());
#end

#foreach($detailfile in $application.getDetailFiles().getDetailFileArray())
#foreach($detailapplication in $applications)
#if (${detailapplication.getClassDef().getName()} == ${detailfile.getDetailFileClassName()})
    	deleteDetail${detailapplication.getClassDef().getName()}(fileobj);
#end
#end
#end

	}

#foreach($detailfile in $application.getDetailFiles().getDetailFileArray())
#foreach($detailapplication in $applications)
#if (${detailapplication.getClassDef().getName()} == ${detailfile.getDetailFileClassName()})

	public void deleteDetail${detailapplication.getClassDef().getName()}(${classDef_name} fileobj)  throws PortalException, SystemException {
		long entityId = fileobj.get${detailfile.getConnectionFieldName().substring(0,1).toUpperCase()}${detailfile.getConnectionFieldName().substring(1)}();
		List<${detailapplication.getClassDef().getName()}> listEntities = ${detailapplication.getClassDef().getName()}LocalServiceUtil.findAllIn${detailfile.getConnectionFieldName()}(entityId);
		for(${detailapplication.getClassDef().getName()} entity: listEntities){
			${detailapplication.getClassDef().getName()}LocalServiceUtil.delete${detailapplication.getClassDef().getName()}Entry(entity);
		}
	}
#end
#end
#end

#if ($hasWorkflow)
	public ${classDef_name} updateStatus(long userId, long entryId, int status, ServiceContext serviceContext)	throws PortalException, SystemException {

		// Entry

		User user = userPersistence.findByPrimaryKey(userId);
		Date now = new Date();

		${classDef_name} entry = ${classInstance}Persistence.findByPrimaryKey(entryId);

		int oldStatus = entry.getStatus();
		long oldStatusByUserId = entry.getStatusByUserId();

		entry.setModifiedDate(serviceContext.getModifiedDate(now));
		entry.setStatus(status);
		entry.setStatusByUserId(user.getUserId());
		entry.setStatusByUserName(user.getFullName());
		entry.setStatusDate(serviceContext.getModifiedDate(now));

		${classInstance}Persistence.update(entry);

		// Indexer

		Indexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(${classDef_name}.class);

		if (status == WorkflowConstants.STATUS_APPROVED) {		

#if ($asset) 
			assetEntryLocalService.updateEntry(
				${classDef_name}.class.getName(), entryId, 
				entry.getModifiedDate(), true);	
#end
#if ($hasTrash)
			// Trash

			if (oldStatus == WorkflowConstants.STATUS_IN_TRASH) {
				trashEntryLocalService.deleteEntry(
					${classDef_name}.class.getName(), entryId);
			}
#end
			indexer.reindex(entry);
		}else {
#if ($asset) 
			assetEntryLocalService.updateVisible(
				${classDef_name}.class.getName(), entryId, false);			
#end	
#if ($hasTrash)
			// Trash

			if (status == WorkflowConstants.STATUS_IN_TRASH) {
				trashEntryLocalService.addTrashEntry(
					userId, entry.getGroupId(), ${classDef_name}.class.getName(),
#if ($asset) 
					entryId, entry.getUuid(), null, oldStatus, null,
#else
					entryId, Long.toString(entryId), null, oldStatus, null,
#end
					null);
			}
			else if (oldStatus == WorkflowConstants.STATUS_IN_TRASH) {
				trashEntryLocalService.deleteEntry(
					${classDef_name}.class.getName(), entryId);
			}
#end
		// Indexer
#if ($hasTrash)
			if (status == WorkflowConstants.STATUS_IN_TRASH) {
				indexer.reindex(entry);
			}
			else {
				indexer.delete(entry);
			}
#else
			indexer.delete(entry);			
#end
		}

		return entry;
	}
#end

#if ($hasTrash)
	@Override
	public ${classDef_name} moveEntryToTrash(long userId, ${classDef_name} entry)
		throws PortalException, SystemException {

		// Entry

		int oldStatus = entry.getStatus();

		if (oldStatus == WorkflowConstants.STATUS_PENDING) {
			entry.setStatus(WorkflowConstants.STATUS_DRAFT);

			${classInstance}Persistence.update(entry);
		}

		updateStatus(
			userId, entry.getPrimaryKey(), WorkflowConstants.STATUS_IN_TRASH,
			new ServiceContext());		

#if ($hasWorkflow)
		// Workflow

		if (oldStatus == WorkflowConstants.STATUS_PENDING) {
			workflowInstanceLinkLocalService.deleteWorkflowInstanceLink(
				entry.getCompanyId(), entry.getGroupId(),
				${classDef_name}.class.getName(), entry.getPrimaryKey());
		}
#end
		return entry;
	}

	
	@Override
	public ${classDef_name} moveEntryToTrash(long userId, long entryId)
		throws PortalException, SystemException {

		${classDef_name} entry = ${classInstance}Persistence.findByPrimaryKey(entryId);

		return moveEntryToTrash(userId, entry);
	}

	@Override
	public void restoreEntryFromTrash(long userId, long entryId)
		throws PortalException, SystemException {

		// Entry
		TrashEntry trashEntry = trashEntryLocalService.getEntry(
			${classDef_name}.class.getName(), entryId);

		${classDef_name} entry = updateStatus(
			userId, entryId, trashEntry.getStatus(), new ServiceContext());		
	}
#end
	public void addEntryResources(
			${classDef_name} entry, boolean addGroupPermissions,
			boolean addGuestPermissions)
		throws PortalException, SystemException {

		resourceLocalService.addResources(
			entry.getCompanyId(), entry.getGroupId(), entry.getUserId(),
			${classDef_name}.class.getName(), entry.getPrimaryKey(), false,
			addGroupPermissions, addGuestPermissions);
	}

	public void addEntryResources(
			${classDef_name} entry, String[] groupPermissions,
			String[] guestPermissions)
		throws PortalException, SystemException {

		resourceLocalService.addModelResources(
			entry.getCompanyId(), entry.getGroupId(), entry.getUserId(),
			${classDef_name}.class.getName(), entry.getPrimaryKey(), groupPermissions,
			guestPermissions);
	}

	public void addEntryResources(
			long entryId, boolean addGroupPermissions,
			boolean addGuestPermissions)
		throws PortalException, SystemException {

		${classDef_name} entry = ${classInstance}Persistence.findByPrimaryKey(entryId);

		addEntryResources(entry, addGroupPermissions, addGuestPermissions);
	}

	public void addEntryResources(
			long entryId, String[] groupPermissions, String[] guestPermissions)
		throws PortalException, SystemException {

		${classDef_name} entry = ${classInstance}Persistence.findByPrimaryKey(entryId);

		addEntryResources(entry, groupPermissions, guestPermissions);
	}

	public void updateEntryResources(
			${classDef_name} entry, String[] groupPermissions,
			String[] guestPermissions)
		throws PortalException, SystemException {

		resourceLocalService.updateResources(
			entry.getCompanyId(), entry.getGroupId(),
			${classDef_name}.class.getName(), entry.getPrimaryKey(), groupPermissions,
			guestPermissions);
	}
#if ($asset) 

	public void updateAsset(
			long userId, ${classDef_name} entry, long[] assetCategoryIds,
			String[] assetTagNames, long[] assetLinkEntryIds)
		throws PortalException, SystemException {
#if ($hasWorkflow)
		boolean visible = false;

		if (entry.isApproved()) {
			visible = true;
		}
#else
		boolean visible = true;
#end

		String summary = HtmlUtil.extractText(
			StringUtil.shorten(entry.get${assetSummaryField.substring(0,1).toUpperCase()}${assetSummaryField.substring(1)}(), 500));

		AssetEntry assetEntry = assetEntryLocalService.updateEntry(
			userId, entry.getGroupId(), entry.getCreateDate(),
			entry.getModifiedDate(), ${classDef_name}.class.getName(),
			entry.getPrimaryKey(), entry.getUuid(), 0, assetCategoryIds,
			assetTagNames, visible, null, null, null, ContentTypes.TEXT_HTML,
			entry.get${assetTitleField.substring(0,1).toUpperCase()}${assetTitleField.substring(1)}(), null, summary, null, null, 0, 0,
			null, false);		

		assetLinkLocalService.updateLinks(
			userId, assetEntry.getEntryId(), assetLinkEntryIds,
			AssetLinkConstants.TYPE_RELATED);
	}

	private String _getUniqueURLTitle(${classDef_name} entry) throws SystemException {
		String urlTitle = _createUrlTitle(entry.getPrimaryKey(), entry.get${assetTitleField.substring(0,1).toUpperCase()}${assetTitleField.substring(1)}());

		long entryId = entry.getPrimaryKey();

		for (int i = 1;; i++) {
			${classDef_name} tmpEntry = ${classInstance}Persistence.fetchByG_UT(
				entry.getGroupId(), urlTitle);

			if ((tmpEntry == null) || (entryId == tmpEntry.getPrimaryKey())) {
				break;
			}
			else {
				String suffix = StringPool.DASH + i;

				String prefix = urlTitle;

				if (urlTitle.length() > suffix.length()) {
					prefix = urlTitle.substring(
						0, urlTitle.length() - suffix.length());
				}

				urlTitle = prefix + suffix;
			}
		}

		return urlTitle;
	}

	private String _createUrlTitle(long entryId, String title) {
		if (title == null) {
			return String.valueOf(entryId);
		}

		title = title.trim().toLowerCase();

		if (Validator.isNull(title) || Validator.isNumber(title)) {

			title = String.valueOf(entryId);
		}
		else {
			title = FriendlyURLNormalizerUtil.normalize(title, _friendlyURLPattern);
		}

		return ModelHintsUtil.trimString(
			${classDef_name}.class.getName(), "urlTitle", title);
	}

	private static Pattern _friendlyURLPattern = Pattern.compile("[^a-z0-9_-]");	
#end
}
